$breakpoints: (
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1440px,
) !default;

$breakpoints-degrade: false !default;

@function check-breakpoint-type($query) {
  $type: type-of($query);

  @if ($type == list) {
    @if (length($query) == 2) {
      @if (type-of(nth($query, 1)) == number and type-of(nth($query, 2)) == number) {
        @return between;
      }

      @if (type-of(nth($query, 1)) == string and type-of(nth($query, 2)) == number) {
        @return single;
      }

      @return complex;
    }
  }

  @return type-of($query);
}

@function breakpoint-parse-query($query, $for: all) {
  $query-type: check-breakpoint-type($query);

  $mq: $for;

  @if ($query-type == number) {
    @return $mq + ' and (min-width: ' + $query + ')';
  }

  @if ($query-type == single) {
    @return $mq + ' and (' + nth($query, 1) + ': ' + nth($query, 2) + ')';
  }

  @if ($query-type == between) {
    @return $mq + ' and (min-width: ' + nth($query, 1) + ') and (max-width: ' + nth($query, 2) + ')';
  }

  @if ($query-type == complex) {
    @each $single-query in $query {
      $mq: $mq + ' and (' + nth($single-query, 1) + ': ' + nth($single-query, 2) + ')';
    }
    @return $mq;
  }
}

@mixin bp($query, $bp: $breakpoints, $for: all, $degrade: $breakpoints-degrade) {
  @if (check-breakpoint-type($query) == string) {
    @if($degrade == false) {
      $query: map-get($bp, $query);
    } @else {
      $query: (max-width, map-get($bp, $query) - 1)
    }
  }

  $query-string: breakpoint-parse-query($query, $for);

  @media #{$query-string} {
    @content;
  }
}
