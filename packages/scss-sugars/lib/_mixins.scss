@mixin mq-generator(
  $mod: null,
  $val: null,
  $pre: null,
  $selector: &, // use with caution
  $postselector: null, // use with caution
  $degrade: null, // use with caution
  $disable-non-bp: null, // use with caution
  $mod-prefix: $mq-generator-mod-prefix,
  $val-prefix: $mq-generator-val-prefix
) {
  $mod: if($mod, $mod-prefix + $mod, null);
  $val: if($val, $val-prefix + $val, null);

  @if not $disable-non-bp {
    @at-root {
      #{$selector + $mod + $val + $postselector} {
        @content;
      }
    }
  }

  @each $name, $value in $breakpoints {
    @include bp($name, $degrade: $degrade) {
      @at-root {
        #{$selector + $mod + '-' + $name + $val + $postselector} {
          @content;
        }
      }

    }
  }
}

@mixin box($w, $h: $w) {
  width: $w;
  height: $h;
}

@mixin aspect-padding($width, $height) {
  width: 100%;
  padding-top: ($height / $width) * 100%;
}

@mixin aspect-ratio($width, $height) {
  position: relative;

  &:before {
    @include aspect-padding($width, $height);

    display: block;

    content: '';
  }
}

@mixin box-fill($t: 0, $r: $t, $b: $t, $l: $t, $position: absolute) {
  top: $t;
  right: $r;
  bottom: $b;
  left: $l;

  position: $position;
}

@mixin center-block($method: flex, $position: absolute) {
  @if $method == flex {
    display: flex;

    align-items: center;
    justify-content: center;
  }

  @if $method == transform {
    position: $position;

    top: 50%;
    left: 50%;

    transform: translate(-50%, -50%);
  }

  @if $method == position {
    @include box-fill(0, $position: $position);

    margin: auto;
  }
}

@mixin ellipsis() {
  overflow: hidden;

  white-space: nowrap;
  text-overflow: ellipsis;
}

@mixin break-word() {
  word-wrap: break-word;
  word-break: break-all;

  overflow-wrap: break-word;
}

@mixin color-mods($colors-list, $type: color, $alter-text: false) {
  $property: if($type == color, 'color', 'background-color');
  $mod: if($type == color, 'color', 'bg');

  @each $color, $value in $colors-list {
    &#{$mq-generator-mod-prefix + $mod + $mq-generator-val-prefix + $color} {
      #{$property}: $value;

      @if $alter-text != false and $type != color {
        color: get-contrast-color($color);
      }
    }
  }
}

@mixin mq-font($list) {
  @each $key, $val in $list {
    @if index(base xs default, $key) {
      font: $val;
    } @else {
      @include bp($key) {
        font: $val;
      }
    }
  }
}
