@import '~@sfem/breakpoint/lib/breakpoint';
@import '~@sfem/scss-sugars/lib/sugars';
@import 'variables';


@each $class, $item in $sugar-map {
  $prop: map-get($item, key);
  $list: map-get($item, list);

  @if sugar-enable($prop) {
    .#{$class} {
      @each $val in $list {
        @include  mq-generator($val: $val) {
          #{$prop}: $val;
        }
      }
    }
  }
}

@if sugar-enable(paddings) {
  $sugar-indent-types: join(padding, $sugar-indent-types);
}

@if sugar-enable(margins) {
  $sugar-indent-types: join(margin, $sugar-indent-types);
}

@each $num in $sugar-padding-list {
  @each $type in $sugar-indent-types {
    $t: str-slice($type, 0, 1);
    $n: strip-unit($num);

    .#{$t} {
      @include  mq-generator($val: $n) {
        #{$type}: convert-unit($num);
      }

      @each $side in $sugar-indent-sides {
        $s: str-slice($side, 0, 1);

        &#{$s} {
          @include  mq-generator($val: $n) {
            #{$type}-#{$side}: convert-unit($num);
          }
        }

      }
    }
  }
}

@if sugar-enable(hiders) {
  .hide {
    @include  mq-generator() {
      display: none;
    }
    @include  mq-generator(
      $mod: before,
      $mod-prefix: '-',
      $disable-non-bp: true,
      $degrade: true
    ) {
      display: none;
    }
  }
}

@if sugar-enable(aspect-ratio) {
  .aspect-ratio {
    @each $val in $sugar-ratio-list {
      @include  mq-generator($val: nth($val, 1) + '-' + nth($val, 2)) {
        @include aspect-ratio(nth($val, 1), nth($val, 2))
      }
    }
  }
}

@if sugar-enable(round) {
  .round {
    @include  mq-generator() {
      border-radius: 50%;
    }
    @include  mq-generator($val: none) {
      border-radius: 0;
    }
  }
}


@if sugar-enable(ellipsis) {
  .ellipsis {
    //@include  mq-generator() {
      @include ellipsis();
    //}
  }
}
